-- SCRIPT TABLAS
DROP TABLE FOTO;
DROP TABLE SEGURO;
DROP TABLE BONUS;
DROP TABLE ADQUIERE;
DROP TABLE ENTRADA;
DROP TABLE PAGO;
DROP TABLE COMENTARIO;
DROP TABLE PARTICIPAEN;
DROP TABLE USUARIO;
DROP TABLE INCIDENCIA;
DROP TABLE GRUPO;
DROP TABLE TOUR;
DROP TABLE GUIA;

CREATE TABLE GUIA(
        ID_GUIA NUMBER(3),
		PASS_USER VARCHAR2(20) NOT NULL,
        NOMBRE VARCHAR2(30) NOT NULL,
        APELLIDO VARCHAR2(30) NOT NULL,
        DNI VARCHAR2(9) NOT NULL UNIQUE,
		EMAIL VARCHAR2(50) NOT NULL UNIQUE,
        NUM_ACREDITACION NUMBER(30),
        CONSTRAINT DNI_GUIA CHECK (LENGTH(DNI)=9),

    PRIMARY KEY(ID_GUIA)
);

CREATE TABLE TOUR(
       ID_TOUR NUMBER(3),
        ID_GUIA SMALLINT, 
        NOMBRE VARCHAR2(100),
        TOUR VARCHAR2(15)
                CHECK( TOUR IN('GASTRONOMICO','HISTORICO','RELIGIOSO','MONUMENTAL') ),
        DURACION SMALLINT,
        DESCRIPCION VARCHAR2(500) NOT NULL,
        IMPORTE NUMBER NOT NULL,
        MAX_PLAZAS INT,
        FOTO VARCHAR2(300),
    PRIMARY KEY (ID_TOUR),
    FOREIGN KEY (ID_GUIA) REFERENCES GUIA(ID_GUIA)
);

CREATE TABLE GRUPO(
        ID_GRUPO NUMBER(3),
        ID_TOUR NUMBER(3),
        FECHA       DATE    NOT NULL,
        HORA        SMALLINT,
        SUFICIENTE INT,
    PRIMARY KEY(ID_GRUPO),
    FOREIGN KEY(ID_TOUR)    REFERENCES TOUR(ID_TOUR)
);

CREATE TABLE INCIDENCIA(
        ID_INCIDENCIA NUMBER(3),
        ID_GRUPO SMALLINT,
        TEXTO       VARCHAR2(150) NOT NULL,
        FECHA       DATE    NOT NULL,
        HORA        SMALLINT,
    PRIMARY KEY (ID_INCIDENCIA),
    FOREIGN KEY(ID_GRUPO)   REFERENCES GRUPO(ID_GRUPO)
);

CREATE TABLE USUARIO (  
        ID_USUARIO SMALLINT,
		PASS_USER VARCHAR2(20) NOT NULL,
        NOMBRE VARCHAR2(50) NOT NULL,
        APELLIDOS VARCHAR2(50) NOT NULL,
        DNI VARCHAR2(50) NOT NULL UNIQUE,
        TELEFONO VARCHAR2(50) NOT NULL,
        EMAIL VARCHAR2(50) NOT NULL UNIQUE,
        FECHA_NAC DATE DEFAULT sysdate NOT NULL,
        CONSTRAINT DNI_USUARIO CHECK (LENGTH(DNI)=9),
    PRIMARY KEY (ID_USUARIO)
);

CREATE TABLE PARTICIPAEN (
    ID_PARTICIPAEN SMALLINT PRIMARY KEY, 
     ID_USUARIO SMALLINT,
   ID_GRUPO SMALLINT,
FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO (ID_USUARIO),
FOREIGN KEY (ID_GRUPO) REFERENCES GRUPO (ID_GRUPO)
);

CREATE TABLE COMENTARIO (
        ID_COMENTARIO SMALLINT PRIMARY KEY, 
        ID_USUARIO REAL,
        ID_TOUR SMALLINT,
        TEXTO VARCHAR2(300) NOT NULL,
    FOREIGN KEY (ID_TOUR) REFERENCES TOUR (ID_TOUR),
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO (ID_USUARIO)

);

CREATE TABLE PAGO(
        ID_PAGO NUMBER(3),
        ID_USUARIO SMALLINT,
        FECHA_PAGO DATE,
        ID_GRUPO SMALLINT,
        IMPORTE NUMBER,
    PRIMARY KEY (ID_PAGO),
    FOREIGN KEY(ID_USUARIO) REFERENCES USUARIO(ID_USUARIO)
);

CREATE TABLE ENTRADA(
        ID_ENTRADA NUMBER(3),
        ID_PAGO SMALLINT,
        IMPORTE NUMBER,
        TIPO_ENTRADA VARCHAR2(15)
                CHECK( TIPO_ENTRADA IN('MUSEO','GIRALDA','PATIO','COMEDOR'
                ,'PALACIOS','BARISTA') ),
    PRIMARY KEY(ID_ENTRADA),
    FOREIGN KEY(ID_PAGO)    REFERENCES PAGO(ID_PAGO)
);

CREATE TABLE ADQUIERE (
        ID_ADQUIERE SMALLINT PRIMARY KEY, 
        ID_TOUR SMALLINT,
        ID_ENTRADA SMALLINT,
    FOREIGN KEY (ID_TOUR) REFERENCES TOUR (ID_TOUR),
    FOREIGN KEY (ID_ENTRADA) REFERENCES ENTRADA (ID_ENTRADA)
);

CREATE TABLE SEGURO (
        ID_SEGURO SMALLINT,
        IMPORTE NUMBER,
        ID_PAGO SMALLINT,
        TIPO_SEGURO VARCHAR2(15),
    PRIMARY KEY(ID_SEGURO),
    FOREIGN KEY(ID_PAGO)    REFERENCES PAGO(ID_PAGO)
);

CREATE TABLE BONUS (
        ID_BONUS NUMBER(3),
        ID_PAGO SMALLINT,
        TIPO_TEMPORADA VARCHAR2(15),
        IMPORTE NUMBER,
    PRIMARY KEY(ID_BONUS),
    FOREIGN KEY(ID_PAGO)    REFERENCES PAGO(ID_PAGO)
);

CREATE TABLE FOTO (
        ID_FOTO SMALLINT,
        URL_FOTO  VARCHAR2(30) NOT NULL,
        ID_TOUR SMALLINT,
    PRIMARY KEY(ID_FOTO),
    FOREIGN KEY(ID_TOUR)    REFERENCES TOUR(ID_TOUR)
);

-- SCRIPT SECUENCIAS
DROP SEQUENCE SEC_GRUPO;
CREATE SEQUENCE SEC_GRUPO
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_GUIA;
CREATE SEQUENCE SEC_GUIA
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_ADQUIERE;
CREATE SEQUENCE SEC_ADQUIERE
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_BONUS;
CREATE SEQUENCE SEC_BONUS
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_COMENTARIO;
CREATE SEQUENCE SEC_COMENTARIO
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_ENTRADA;
CREATE SEQUENCE SEC_ENTRADA
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_FOTO;
CREATE SEQUENCE SEC_FOTO
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_INCIDENCIA;
CREATE SEQUENCE SEC_INCIDENCIA
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_PAGO;
CREATE SEQUENCE SEC_PAGO
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_PARTICIPAEN;
CREATE SEQUENCE SEC_PARTICIPAEN
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_SEGURO;
CREATE SEQUENCE SEC_SEGURO
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_TOUR;
CREATE SEQUENCE SEC_TOUR
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

DROP SEQUENCE SEC_USUARIO;
CREATE SEQUENCE SEC_USUARIO
INCREMENT BY 1
START WITH 1
MAXVALUE 999999;

CREATE OR REPLACE TRIGGER TR_SEC_GRUPO
BEFORE INSERT ON GRUPO
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_GRUPO.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_GRUPO := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_GUIA
BEFORE INSERT ON GUIA
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_GUIA.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_GUIA := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_ADQUIERE
BEFORE INSERT ON ADQUIERE
FOR EACH ROW
DECLARE
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_ADQUIERE.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_ADQUIERE := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_BONUS
BEFORE INSERT ON BONUS
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_BONUS.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_BONUS := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_COMENTARIO
BEFORE INSERT ON COMENTARIO
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_COMENTARIO.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_COMENTARIO := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_ENTRADA
BEFORE INSERT ON ENTRADA
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_ENTRADA.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_ENTRADA := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_FOTO
BEFORE INSERT ON FOTO
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_FOTO.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_FOTO := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_INCIDENCIA
BEFORE INSERT ON INCIDENCIA
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_INCIDENCIA.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_INCIDENCIA := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_PAGO
BEFORE INSERT ON PAGO
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_PAGO.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_PAGO := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_PARTICIPAEN
BEFORE INSERT ON PARTICIPAEN
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_PARTICIPAEN.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_PARTICIPAEN := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_SEGURO
BEFORE INSERT ON SEGURO
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_SEGURO.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_SEGURO := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_TOUR
BEFORE INSERT ON TOUR
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_TOUR.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_TOUR := VALORSEC;
END;
/

CREATE OR REPLACE TRIGGER TR_SEC_USUARIO
BEFORE INSERT ON USUARIO
FOR EACH ROW
DECLARE 
	VALORSEC NUMBER := 0;
BEGIN
	SELECT SEC_USUARIO.NEXTVAL INTO VALORSEC FROM DUAL;
	:NEW.ID_USUARIO := VALORSEC;
END;
/

--SCRIPT TRIGGERS
create or replace TRIGGER MINIMO_GRUPO 
BEFORE INSERT OR UPDATE ON PARTICIPAEN
FOR EACH ROW
DECLARE
  MINI INTEGER;
  UNI SMALLINT;
  MEDIO INTEGER;
BEGIN
      
  SELECT ID_TOUR INTO MEDIO FROM GRUPO WHERE ID_GRUPO = :NEW.ID_GRUPO;
  SELECT MAX_PLAZAS INTO MINI FROM TOUR WHERE ID_TOUR = MEDIO;
  SELECT COUNT(*) INTO UNI FROM PARTICIPAEN WHERE ID_GRUPO = :NEW.ID_GRUPO;
  IF(UNI>= ROUND(MINI*25/100)-1)
    THEN UPDATE GRUPO SET SUFICIENTE = '1' WHERE  ID_GRUPO = :NEW.ID_GRUPO;  

  END IF;
END;
/

create or replace TRIGGER MAXIMO_GRUPO 
BEFORE INSERT OR UPDATE ON PARTICIPAEN
FOR EACH ROW
DECLARE
  MAXIM INTEGER;
  UN INTEGER;
  MEDIO INTEGER;
BEGIN
  SELECT ID_TOUR INTO MEDIO FROM GRUPO WHERE ID_GRUPO = :NEW.ID_GRUPO;
  SELECT MAX_PLAZAS INTO MAXIM FROM TOUR WHERE ID_TOUR = MEDIO;
  SELECT COUNT(*) INTO UN FROM PARTICIPAEN WHERE ID_GRUPO = :NEW.ID_GRUPO;
  IF(UN>=MAXIM)
    THEN raise_application_error(-20999, ' No pueden entrar más personas en el grupo');
  END IF;
END;
/


CREATE OR REPLACE TRIGGER ASIGNA_GUIA
BEFORE INSERT ON GRUPO
FOR EACH ROW 
DECLARE
	UN NUMBER(3);
    UT NUMBER(3);
BEGIN
	SELECT ID_GUIA INTO UN FROM TOUR WHERE ID_TOUR = :NEW.ID_TOUR;
    SELECT COUNT(*) INTO UT FROM GRUPO WHERE HORA = :NEW.HORA AND FECHA = :NEW.FECHA AND ID_TOUR IN (SELECT ID_TOUR FROM TOUR WHERE ID_GUIA = UN);
    
    IF UT >= 1
        THEN raise_application_error (-20600,:NEW.ID_GRUPO || 'El guia ya está ocupado para esa hora.');
    END IF;
END;
/


CREATE OR REPLACE TRIGGER UN_COMENTARIO
BEFORE INSERT OR UPDATE ON COMENTARIO 
FOR EACH ROW 
DECLARE
    COMENTARIOSHECHOS INTEGER;
BEGIN
  SELECT COUNT(*)INTO COMENTARIOSHECHOS FROM COMENTARIO  WHERE (ID_USUARIO = :NEW.ID_USUARIO AND ID_TOUR = :NEW.ID_TOUR);
  IF (COMENTARIOSHECHOS>=1) 
      THEN raise_application_error(-20610,'Un usuario sólo puede realizar un comentario por tour');
  END IF;    
END;
/


CREATE OR REPLACE TRIGGER FECHA_HORA_INCIDENCIA

BEFORE INSERT OR UPDATE ON INCIDENCIA 

for each row
DECLARE 
    US DATE;
    UN SMALLINT;
BEGIN  
    SELECT GRUPO.FECHA, GRUPO.HORA INTO US, UN FROM GRUPO WHERE ID_GRUPO = :NEW.ID_GRUPO;
    IF(US <> :NEW.FECHA OR UN <> :NEW.HORA)
             
    THEN
        raise_application_error(-20987, ' Esta incidencia no es de este grupo');
        
    END IF;
END;
/

--SCRIPT PROCEDURES
CREATE OR REPLACE PROCEDURE drop_tables AS
BEGIN 
    EXECUTE IMMEDIATE 'DROP TABLE FOTO';
    EXECUTE IMMEDIATE 'DROP TABLE SEGURO';
    EXECUTE IMMEDIATE 'DROP TABLE BONUS';
    EXECUTE IMMEDIATE 'DROP TABLE ADQUIERE';
    EXECUTE IMMEDIATE 'DROP TABLE ENTRADA';
    EXECUTE IMMEDIATE 'DROP TABLE PAGO';
    EXECUTE IMMEDIATE 'DROP TABLE COMENTARIO';
    EXECUTE IMMEDIATE 'DROP TABLE PARTICIPAEN';
    EXECUTE IMMEDIATE 'DROP TABLE USUARIO';
    EXECUTE IMMEDIATE 'DROP TABLE INCIDENCIA';
    EXECUTE IMMEDIATE 'DROP TABLE GRUPO';
    EXECUTE IMMEDIATE 'DROP TABLE TOUR';
    EXECUTE IMMEDIATE 'DROP TABLE GUIA';
END;
/

CREATE OR REPLACE PROCEDURE inserta_foto (v_url IN FOTO.URL_FOTO%TYPE, v_id_tour IN FOTO.ID_TOUR%TYPE) AS
BEGIN 
    INSERT INTO FOTO (URL_FOTO,ID_TOUR) VALUES (v_url, v_id_tour);
END inserta_foto;
/

CREATE OR REPLACE PROCEDURE inserta_usuario(
   v_pass IN USUARIO.PASS_USER%TYPE,
   v_nombre IN USUARIO.NOMBRE%TYPE, 
   v_apellidos IN USUARIO.APELLIDOS%TYPE,
   v_dni IN USUARIO.DNI%TYPE, 
   v_telefono IN USUARIO.TELEFONO%TYPE, 
   v_email IN USUARIO.EMAIL%TYPE,
   v_fnac IN USUARIO.FECHA_NAC%TYPE) IS
BEGIN
    INSERT INTO USUARIO (PASS_USER, NOMBRE, APELLIDOS, DNI, TELEFONO, EMAIL, FECHA_NAC) VALUES (v_pass, v_nombre, v_apellidos, v_dni, v_telefono, v_email, v_fnac);
    COMMIT WORK;

END inserta_usuario; 
/

CREATE OR REPLACE PROCEDURE inserta_guia ( 
   v_pass IN GUIA.PASS_USER%TYPE,
   v_nombre IN GUIA.NOMBRE%TYPE,
   v_apell IN GUIA.APELLIDO%TYPE,
   v_dni IN GUIA.DNI%TYPE,
   v_email IN GUIA.EMAIL%TYPE, 
   v_acred IN GUIA.NUM_ACREDITACION%TYPE)  AS
BEGIN 
    INSERT INTO GUIA (PASS_USER, NOMBRE, APELLIDO, DNI, EMAIL, NUM_ACREDITACION)
    VALUES (v_pass, v_nombre, v_apell, v_dni, v_email, v_acred); 
    COMMIT WORK;
END inserta_guia; 
/

CREATE OR REPLACE PROCEDURE inserta_tour(
   v_idguia IN TOUR.ID_GUIA%TYPE,
   v_nombre IN TOUR.NOMBRE%TYPE,
   v_tour IN TOUR.TOUR%TYPE,
   v_dur IN TOUR.DURACION%TYPE,
   v_descr IN TOUR.DESCRIPCION%TYPE,
   v_cost IN TOUR.IMPORTE%TYPE,
   v_plazas IN TOUR.MAX_PLAZAS%TYPE,
   v_foto IN TOUR.FOTO%TYPE) AS
BEGIN 
    INSERT INTO TOUR (ID_GUIA, NOMBRE, TOUR, DURACION, DESCRIPCION, IMPORTE, MAX_PLAZAS, FOTO) VALUES (v_idguia, v_nombre, v_tour, v_dur, v_descr, v_cost, v_plazas, v_foto);
    COMMIT WORK;

END inserta_tour; 
/

CREATE OR REPLACE PROCEDURE inserta_grupo(
   v_idtour IN GRUPO.ID_TOUR%TYPE,
   v_fecha IN GRUPO.FECHA%TYPE,
   v_hora IN GRUPO.HORA%TYPE) AS
BEGIN 
    INSERT INTO GRUPO (ID_TOUR, FECHA, HORA) VALUES (v_idtour, v_fecha, v_hora);
    COMMIT WORK;
END inserta_grupo; 
/

CREATE OR REPLACE PROCEDURE inserta_incidencia(
   v_idgr IN INCIDENCIA.ID_GRUPO%TYPE,
   v_text IN INCIDENCIA.TEXTO%TYPE,
   v_f IN INCIDENCIA.FECHA%TYPE,
   v_h IN INCIDENCIA.HORA%TYPE) AS
BEGIN 
    INSERT INTO INCIDENCIA (ID_GRUPO, TEXTO, FECHA, HORA) VALUES (v_idgr, v_text, v_f, v_h);
    COMMIT WORK;
END inserta_incidencia; 
/

CREATE OR REPLACE PROCEDURE inserta_participa_en (
   v_idus IN PARTICIPAEN.ID_USUARIO%TYPE,
   v_idgr IN PARTICIPAEN.ID_GRUPO%TYPE) AS
BEGIN 
    INSERT INTO PARTICIPAEN (ID_USUARIO, ID_GRUPO) VALUES (v_idus, v_idgr);
    COMMIT WORK;

END inserta_participa_en; 
/

CREATE OR REPLACE PROCEDURE inserta_comentario(
   v_text IN COMENTARIO.TEXTO%TYPE,
   v_idus IN COMENTARIO.ID_USUARIO%TYPE,
   v_idt IN COMENTARIO.ID_TOUR%TYPE) AS
BEGIN 
    INSERT INTO COMENTARIO (TEXTO,ID_USUARIO,ID_TOUR) VALUES (v_text, v_idus, v_idt);
    COMMIT WORK;
END inserta_comentario; 
/

CREATE OR REPLACE PROCEDURE inserta_pago(
   v_idus IN PAGO.ID_USUARIO%TYPE,
   v_fech IN PAGO.FECHA_PAGO%TYPE,
   v_imp IN PAGO.IMPORTE%TYPE,
   v_grupo IN PAGO.ID_GRUPO%TYPE) AS
BEGIN 
    INSERT INTO PAGO (ID_USUARIO,FECHA_PAGO,IMPORTE, ID_GRUPO) VALUES (v_idus, v_fech, v_imp, v_grupo);
    COMMIT WORK;
END inserta_pago; 
/

CREATE OR REPLACE PROCEDURE inserta_entrada(
    v_idp IN ENTRADA.ID_PAGO%TYPE,
    v_imp IN ENTRADA.IMPORTE%TYPE,
    v_tpen IN ENTRADA.TIPO_ENTRADA%TYPE) AS
BEGIN 
    INSERT INTO ENTRADA (ID_PAGO,IMPORTE,TIPO_ENTRADA) VALUES (v_idp, v_imp, v_tpen);
    COMMIT WORK;
END; 
/

CREATE OR REPLACE PROCEDURE inserta_adquiere(
    v_idt IN ADQUIERE.ID_TOUR%TYPE,
    v_ide IN ADQUIERE.ID_ENTRADA%TYPE) AS
BEGIN 
    INSERT INTO ADQUIERE (ID_TOUR,ID_ENTRADA) VALUES (v_idt, v_ide);
    COMMIT WORK;
END; 
/

CREATE OR REPLACE PROCEDURE inserta_bonus(
   v_idp IN BONUS.ID_PAGO%TYPE,
   v_temp IN BONUS.TIPO_TEMPORADA%TYPE,
   v_imp IN BONUS.IMPORTE%TYPE) AS
BEGIN 
     INSERT INTO BONUS (ID_PAGO,TIPO_TEMPORADA,IMPORTE) VALUES (v_idp, v_temp, v_imp);
     COMMIT WORK;
END; 
/

CREATE OR REPLACE PROCEDURE inserta_seguro(
    v_imp IN SEGURO.IMPORTE%TYPE,
    v_idp IN SEGURO.ID_PAGO%TYPE,
    v_tip IN SEGURO.TIPO_SEGURO%TYPE) AS
BEGIN 
     INSERT INTO SEGURO (IMPORTE,ID_PAGO,TIPO_SEGURO) VALUES (v_imp, v_idp, v_tip);
    COMMIT WORK;
END; 
/

CREATE OR REPLACE PROCEDURE quitar_tour (
    v_idt IN TOUR.ID_TOUR%TYPE) AS
  NUM_GRUPOS NUMBER;
BEGIN
  SELECT COUNT(*) INTO NUM_GRUPOS FROM GRUPO WHERE GRUPO.ID_TOUR = v_idt;
  
  IF (NUM_GRUPOS <> 0) THEN
    RAISE_APPLICATION_ERROR(-20600,'No se puede quitar el tour porque tiene grupos asignados');
  ELSE
    DELETE FROM FOTO WHERE ID_TOUR = v_idt;
    DELETE FROM ADQUIERE WHERE ID_TOUR = v_idt;
    DELETE FROM COMENTARIO WHERE ID_TOUR = v_idt;
    DELETE FROM TOUR WHERE ID_TOUR = v_idt;
  END IF;
END;
/


CREATE OR REPLACE PROCEDURE modificar_tour(
    v_idt IN TOUR.ID_TOUR%TYPE,
    v_nombre IN TOUR.NOMBRE%TYPE,
    v_t IN TOUR.TOUR%TYPE,
    v_dur IN TOUR.DURACION%TYPE,
    v_desc IN TOUR.DESCRIPCION%TYPE,
    v_coste IN TOUR.IMPORTE%TYPE,
    v_max_plazas IN TOUR.MAX_PLAZAS%TYPE) IS
BEGIN 
    UPDATE TOUR SET TOUR = v_t, NOMBRE = v_nombre, DURACION = v_dur, DESCRIPCION = v_desc, IMPORTE = v_coste, MAX_PLAZAS = v_max_plazas
  WHERE ID_TOUR = v_idt;
  COMMIT WORK;
END;

/

--SCRIPT FUNCIONES
--Assert Equals
CREATE OR REPLACE FUNCTION ASSERT_EQUALS (salida BOOLEAN, salida_esperada BOOLEAN) RETURN VARCHAR2 AS 
BEGIN
  IF (salida = salida_esperada) THEN
    RETURN 'EXITO';
  ELSE
    RETURN 'FALLO';
  END IF;
END ASSERT_EQUALS;
/

CREATE OR REPLACE FUNCTION COMPUTE_PRICE (p_id_pago PAGO.ID_PAGO%TYPE) RETURN PAGO.IMPORTE%TYPE AS
    sum_res PAGO.IMPORTE%TYPE;
BEGIN
    SELECT SUM(IMPORTE) INTO sum_res FROM (
        SELECT IMPORTE FROM PAGO WHERE ID_PAGO = p_id_pago UNION ALL
        SELECT IMPORTE FROM ENTRADA WHERE ID_PAGO = p_id_pago UNION ALL
        SELECT IMPORTE FROM SEGURO WHERE ID_PAGO = p_id_pago UNION ALL
        SELECT IMPORTE FROM BONUS WHERE ID_PAGO = p_id_pago
    );
    RETURN sum_res * 1.21;
END COMPUTE_PRICE;
/

--BEGIN
--    DBMS_OUTPUT.PUT_LINE(COMPUTE_PRICE(1)); 
--END;



--SCRIPT DEFENSA

EXECUTE inserta_guia('123abc','PEDRO','SANCHEZ PEREZ-CASTEJON', '26432436W','pedro@hotmail.com','143785127657');
EXECUTE inserta_guia('123abc','SARA','ROMERO DIAZ', '23452436Y','sara@hotmail.com','143783953657');
EXECUTE inserta_guia('123abc','JORGE','ORIENTACION ORTIZ', '26521436X','guia@hotmail.com','345785127765');
EXECUTE inserta_guia('123abc','JULIETA','SANCHEZ INTREPIDA', '23442336T','jci@hotmail.com','165799723657');

EXECUTE inserta_usuario('123abc','SERGIO','AQUINO BLANCO','93652821E','492557843','serg@gmail.com',to_date('23/06/97','DD/MM/RR'));
EXECUTE inserta_usuario('123abc','ENRIQUE','AQUINO BLANCO','35752821E','192157848','enraqubl@gmail.com',to_date('23/06/97','DD/MM/RR'));
EXECUTE inserta_usuario('123abc','AGUILA','AVIDA MORENO','46639828U','756483723','usuario@gmail.com',to_date('23/04/99','DD/MM/RR'));
EXECUTE inserta_usuario('123abc','SOFIA','CORREDERA LOMAS','18843268P','857443220','sofi@gmail.com',to_date('23/01/89','DD/MM/RR'));
EXECUTE inserta_usuario('123abc','MARTA','AVIDA MORENO','46639829U','756483213','martarte@gmail.com',to_date('23/04/99','DD/MM/RR'));
EXECUTE inserta_usuario('123abc','LUZ','GUTIERREZ FUERTES','17743695R','857443220','luz@gmail.com',to_date('13/05/88','DD/MM/RR'));

EXECUTE inserta_tour('1', 'Descubre el casco histórico','HISTORICO', '2','Combine la cultura y la historia en grupos pequeños, ideal para los amantes de la cultura.', '25','5', 'catedral.jpg');
EXECUTE inserta_tour('2', 'Come tradicionalmente','GASTRONOMICO', '2','Recorrido por la ciudad probando los platos mas tipicos','20','10', 'bar.jpg');
EXECUTE inserta_tour('1', 'Circuito Patrimonio de la Humanidad','MONUMENTAL', '3','Descubre los principales monumentos de la ciudad en la mejor compañia y sin perder ninguna anecdota al respecto.', '15','20', 'alcazar.jpg');
EXECUTE inserta_tour('3', 'Saborea el mundo','GASTRONOMICO', '4','Recorrido gastronomico que explora las influencias extrangeras en la comida local.','30','7', 'tapas.jpg');
EXECUTE inserta_tour('1', 'El archivo en la calle','HISTORICO', '2','Investiga con nosotros el legado literario que nos rodea.', '20','10', 'calle.jpg');
EXECUTE inserta_tour('2', 'Conoce tu ciudad','HISTORICO', '2','Conoce el pasado de las calles de la ciudad.','20','7', 'catedral.jpg');
EXECUTE inserta_tour('1', 'Luegares de valor espiritual','RELIGIOSO', '3','No puedes perderte estos monumentos religiosos.', '10','30', 'alcazar.jpg');
EXECUTE inserta_tour('3', 'Tour ardiente','GASTRONOMICO', '4','Recorrido gastronómico que explora los platos mas picantes.','30','7', 'tapas.jpg');

EXECUTE inserta_grupo('2',to_date('23/12/20','DD/MM/RR'),'16');
EXECUTE inserta_grupo('2',to_date('29/12/20','DD/MM/RR'),'18');
EXECUTE inserta_grupo('1',to_date('26/12/20','DD/MM/RR'),'16');
EXECUTE inserta_grupo('1',to_date('26/12/20','DD/MM/RR'),'19');
EXECUTE inserta_grupo('1',to_date('22/12/20','DD/MM/RR'),'12');
EXECUTE inserta_grupo('1',to_date('30/12/20','DD/MM/RR'),'17');
EXECUTE inserta_grupo('1',to_date('01/01/21','DD/MM/RR'),'20');
EXECUTE inserta_grupo('2',to_date('23/12/20','DD/MM/RR'),'15');
EXECUTE inserta_grupo('1',to_date('27/05/20','DD/MM/RR'),'5');
EXECUTE inserta_grupo('1',to_date('17/05/20','DD/MM/RR'),'6');

EXECUTE inserta_participa_en('1','1');
EXECUTE inserta_participa_en('2','2');
EXECUTE inserta_participa_en('1','3');
EXECUTE inserta_participa_en('2','4');
EXECUTE inserta_participa_en('3','1');
EXECUTE inserta_participa_en('4','1');
EXECUTE inserta_participa_en('5','1');
EXECUTE inserta_participa_en('6','1');

EXECUTE inserta_incidencia('1','UN CLIENTE SE HA LESIONADO',to_date('23/12/20','DD/MM/RR'),'16');
EXECUTE inserta_incidencia('3','UN CLIENTE SE HA PERDIDO',to_date('26/12/20','DD/MM/RR'),'16');
EXECUTE inserta_incidencia('1','UN CLIENTE SE QUEJA POR EL CALOR EXCESIVO',to_date('23/12/20','DD/MM/RR'),'16');
EXECUTE inserta_incidencia('3','UN CLIENTE HA QUEDADO EN SHOCK AL PLANTEARSE CUESTIONES EXISTENCIALES',to_date('26/12/20','DD/MM/RR'),'16');

EXECUTE inserta_comentario('This was an excellent tour. Our guide was very informative, knowledgeable and thoroughly enjoyed the time spent walking around, hearing stores and eating!','1','2');
EXECUTE inserta_comentario('I ended up a little bit tired but it was fun and informative','2','1');
EXECUTE inserta_comentario('Awesome!','3','2');
EXECUTE inserta_comentario('Le tour c`est magnifique','4','2');

EXECUTE inserta_pago('1',to_date('23/12/20','DD/MM/RR'),'47', 1);
EXECUTE inserta_pago('2',to_date('24/12/20','DD/MM/RR'),'42', 2);
EXECUTE inserta_pago('1',to_date('26/12/20','DD/MM/RR'),'40', 3);
EXECUTE inserta_pago('2',CURRENT_DATE ,'47', 3);

EXECUTE inserta_bonus('1','ALTA','17');
EXECUTE inserta_bonus('2','ALTA','17');

EXECUTE inserta_seguro('3',NULL,'Cancelación');
EXECUTE inserta_seguro('3',NULL,'Accidentes');